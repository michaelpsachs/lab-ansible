---
- name: Deploy Docker Compose VM for AAP Work
  hosts: kvm_host
  become: true
  vars:
    vm_name: docker-compose1
    default_user: mike
    ssh_public_key: ~/.ssh/id_ed25519.pub
    vm_config:
      memory: 8192
      vcpus: 4
      disk: 100G
      network: lab-net

  tasks:
    - name: Create cloud-init user-data
      ansible.builtin.copy:
        dest: "/tmp/user-data-{{ vm_name }}"
        mode: '0644'
        content: |
          #cloud-config
          hostname: {{ vm_name }}
          users:
            - name: {{ default_user }}
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              plain_text_passwd: 'temppass123'
              lock_passwd: false
              ssh_authorized_keys:
                - {{ lookup('file', ssh_public_key) }}

          package_update: true
          packages:
            - docker.io
            - docker-compose-plugin
            - python3-pip
            - python3-venv
            - curl
            - git
            - htop
            - vim
            - build-essential
            - podman
            - buildah

          runcmd:
            - systemctl enable docker
            - systemctl start docker
            - usermod -aG docker {{ default_user }}
            - mkdir -p /home/{{ default_user }}/{builds,images,ansible}
            - chown -R {{ default_user }}:{{ default_user }} /home/{{ default_user }}
            - pip3 install ansible-builder ansible-navigator ansible-core

    - name: Create cloud-init meta-data
      ansible.builtin.copy:
        dest: "/tmp/meta-data-{{ vm_name }}"
        mode: '0644'
        content: |
          instance-id: {{ vm_name }}-{{ ansible_date_time.epoch }}
          local-hostname: {{ vm_name }}

    - name: Create cloud-init network-config
      ansible.builtin.copy:
        dest: "/tmp/network-config-{{ vm_name }}"
        mode: '0644'
        content: |
          version: 2
          ethernets:
            enp1s0:
              dhcp4: true

    - name: Create cloud-init seed disk locally on Pi
      delegate_to: localhost
      become: false
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          rm -f /tmp/cloud-init-{{ vm_name }}.img
          dd if=/dev/zero of=/tmp/cloud-init-{{ vm_name }}.img bs=1M count=1 2>/dev/null
          mkfs.vfat -n cidata /tmp/cloud-init-{{ vm_name }}.img >/dev/null 2>&1
          mkdir -p /tmp/cloud-init-mount-{{ vm_name }}
          sudo mount -o loop /tmp/cloud-init-{{ vm_name }}.img /tmp/cloud-init-mount-{{ vm_name }}
          sudo cp /tmp/user-data-{{ vm_name }} /tmp/cloud-init-mount-{{ vm_name }}/user-data
          sudo cp /tmp/meta-data-{{ vm_name }} /tmp/cloud-init-mount-{{ vm_name }}/meta-data
          sudo cp /tmp/network-config-{{ vm_name }} /tmp/cloud-init-mount-{{ vm_name }}/network-config
          sudo umount /tmp/cloud-init-mount-{{ vm_name }}
          rmdir /tmp/cloud-init-mount-{{ vm_name }}
        executable: /bin/bash
      changed_when: true

    - name: Copy seed disk to laptop
      ansible.builtin.copy:
        src: /tmp/cloud-init-{{ vm_name }}.img
        dest: /tmp/cloud-init-{{ vm_name }}.img
        mode: '0644'

    - name: Download Ubuntu cloud image if not present
      ansible.builtin.get_url:
        url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
        dest: /tmp/ubuntu-22.04-cloudimg.img
        mode: '0644'

    - name: Remove old VM if it exists
      ansible.builtin.shell:
        cmd: |
          /usr/bin/virsh destroy {{ vm_name }} 2>/dev/null || true
          /usr/bin/virsh undefine {{ vm_name }} --remove-all-storage 2>/dev/null || true
      changed_when: false
      failed_when: false

    - name: Create VM disk from cloud image
      ansible.builtin.command:
        cmd: /usr/bin/cp /tmp/ubuntu-22.04-cloudimg.img /var/lib/libvirt/images/{{ vm_name }}.qcow2
      changed_when: true

    - name: Resize VM disk
      ansible.builtin.command:
        cmd: /usr/bin/qemu-img resize /var/lib/libvirt/images/{{ vm_name }}.qcow2 {{ vm_config.disk }}
      changed_when: true

    - name: Create Docker Compose VM
      ansible.builtin.shell:
        cmd: |
          /usr/bin/virt-install \
            --name {{ vm_name }} \
            --ram {{ vm_config.memory }} \
            --vcpus {{ vm_config.vcpus }} \
            --disk path=/var/lib/libvirt/images/{{ vm_name }}.qcow2,format=qcow2,bus=virtio \
            --disk path=/tmp/cloud-init-{{ vm_name }}.img,device=disk,bus=virtio \
            --network network={{ vm_config.network }},model=virtio \
            --os-variant ubuntu22.04 \
            --graphics none \
            --import \
            --noautoconsole
      changed_when: true

    - name: Wait for VM to start
      ansible.builtin.shell:
        cmd: set -o pipefail && /usr/bin/virsh list --state-running | grep '{{ vm_name }}'
        executable: /bin/bash
      register: vm_running
      retries: 15
      delay: 5
      until: vm_running.rc == 0
      changed_when: false

    - name: Get VM MAC address
      ansible.builtin.shell:
        cmd: set -o pipefail && /usr/bin/virsh domiflist {{ vm_name }} | awk '/{{ vm_config.network }}/ {print $5}'
        executable: /bin/bash
      register: vm_mac
      changed_when: false

    - name: Get VM vnet interface name
      ansible.builtin.shell:
        cmd: set -o pipefail && /usr/bin/virsh domiflist {{ vm_name }} | awk '/{{ vm_config.network }}/ {print $1}'
        executable: /bin/bash
      register: vm_vnet
      changed_when: false

    - name: Ensure vnet is attached to bridge
      ansible.builtin.command:
        cmd: /usr/sbin/brctl addif virbr1 {{ vm_vnet.stdout }}
      failed_when: false
      changed_when: false

    - name: Verify bridge connection
      ansible.builtin.shell:
        cmd: set -o pipefail && /usr/sbin/brctl show virbr1 | grep {{ vm_vnet.stdout }}
        executable: /bin/bash
      register: bridge_check
      retries: 5
      delay: 2
      until: bridge_check.rc == 0
      changed_when: false

    - name: Wait for initial boot
      ansible.builtin.pause:
        seconds: 120

    - name: Try to get VM IP via ARP
      ansible.builtin.shell:
        cmd: set -o pipefail && arp -n | grep '{{ vm_mac.stdout }}' | awk '{print $1}'
        executable: /bin/bash
      register: vm_ip_arp
      retries: 30
      delay: 10
      until: vm_ip_arp.stdout != ''
      changed_when: false

    - name: Set VM IP variable
      ansible.builtin.set_fact:
        vm_ip: "{{ vm_ip_arp.stdout }}"

    - name: Display VM IP
      ansible.builtin.debug:
        msg: "VM {{ vm_name }} is ready at {{ vm_ip }}"

    - name: Wait for SSH to be available
      ansible.builtin.wait_for:
        host: "{{ vm_ip }}"
        port: 22
        delay: 10
        timeout: 600

- name: Configure AAP Build Environment
  hosts: kvm_host
  become: false
  vars:
    vm_name: docker-compose1
    default_user: mike
    vm_config:
      network: lab-net
  tasks:
    - name: Get VM MAC address
      ansible.builtin.shell:
        cmd: set -o pipefail && /usr/bin/virsh domiflist {{ vm_name }} | awk '/{{ vm_config.network }}/ {print $5}'
        executable: /bin/bash
      register: vm_mac
      changed_when: false

    - name: Get VM IP via ARP
      ansible.builtin.shell:
        cmd: set -o pipefail && arp -n | grep '{{ vm_mac.stdout }}' | awk '{print $1}'
        executable: /bin/bash
      register: vm_ip
      retries: 5
      delay: 5
      until: vm_ip.stdout != ''
      changed_when: false

    - name: Wait for cloud-init to complete
      ansible.builtin.command:
        cmd: >-
          ssh -o StrictHostKeyChecking=no
          -o PreferredAuthentications=password
          -o PubkeyAuthentication=no
          {{ default_user }}@{{ vm_ip.stdout }}
          'cloud-init status --wait'
      environment:
        ANSIBLE_HOST_KEY_CHECKING: "False"
      retries: 20
      delay: 30
      changed_when: false

    - name: Verify Docker installation
      ansible.builtin.command:
        cmd: ssh {{ default_user }}@{{ vm_ip.stdout }} 'docker --version'
      register: docker_version
      changed_when: false

    - name: Verify ansible-builder installation
      ansible.builtin.command:
        cmd: ssh {{ default_user }}@{{ vm_ip.stdout }} 'ansible-builder --version'
      register: builder_version
      changed_when: false

    - name: Create example execution environment definition
      ansible.builtin.shell:
        cmd: |
          ssh {{ default_user }}@{{ vm_ip.stdout }} 'cat > /home/{{ default_user }}/builds/execution-environment.yml << "EOFMARKER"
          ---
          version: 3

          images:
            base_image:
              name: quay.io/ansible/creator-ee:latest

          dependencies:
            galaxy: requirements.yml
            python: requirements.txt
            system: bindep.txt

          additional_build_steps:
            append_final:
              - RUN echo "Custom EE built successfully"
          EOFMARKER
          '
      changed_when: true

    - name: Create example requirements files
      ansible.builtin.shell:
        cmd: |
          ssh {{ default_user }}@{{ vm_ip.stdout }} 'cat > /home/{{ default_user }}/builds/requirements.yml << "EOFMARKER"
          ---
          collections:
            - name: community.general
            - name: ansible.posix
          EOFMARKER
          '

          ssh {{ default_user }}@{{ vm_ip.stdout }} 'cat > /home/{{ default_user }}/builds/requirements.txt << "EOFMARKER"
          requests
          jinja2
          EOFMARKER
          '

          ssh {{ default_user }}@{{ vm_ip.stdout }} 'cat > /home/{{ default_user }}/builds/bindep.txt << "EOFMARKER"
          git [platform:rpm]
          python3-devel [platform:rpm]
          EOFMARKER
          '
      changed_when: true

    - name: Check Docker and Podman status
      ansible.builtin.shell:
        cmd: ssh {{ default_user }}@{{ vm_ip.stdout }} 'docker ps && echo --- && podman version'
      register: container_status
      failed_when: false
      changed_when: false

    - name: Final summary
      ansible.builtin.debug:
        msg:
          - "✅ AAP Build Environment (docker-compose1) is ready!"
          - "📍 IP Address: {{ vm_ip.stdout }}"
          - "🐳 Docker: {{ docker_version.stdout }}"
          - "🔨 Ansible Builder: {{ builder_version.stdout }}"
          - "📁 Build directory: /home/{{ default_user }}/builds"
          - "💻 SSH: ssh {{ default_user }}@{{ vm_ip.stdout }}"
          - "🔑 Password: temppass123"
          - ""
          - "Quick start:"
          - "  cd ~/builds"
          - "  ansible-builder build --tag my-custom-ee:latest"
